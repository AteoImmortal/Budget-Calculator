const viewController = (function(){
    const DOMstrings = {
        inputType: '#input__type',
        inputDescription: '#input__description',
        inputValue: '#input__value',
        form: '#budget-form',
        incomeContainer: '#income__list',
        expenseContainer: '#expenses__list',
        budgetLabel: '#budget-value',
        incomLabel: '#incom-label',
        expenseLabel: '#expense-label',
        expensesPercentLabel: '#expense-percent-label',
        budgetTabl: '#budget-table',
        monthLabel: '#month',
        yearLabel: '#year'
        }

    function getInput() {
        return {
            type: document.querySelector(DOMstrings.inputType).value,
            description: document.querySelector(DOMstrings.inputDescription).value,
            value: document.querySelector(DOMstrings.inputValue).value,
        }
    };

    function formatNumber(num, type) {
        let numSplit, int, dec, newInt, resultNumber;

        // –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ '-' —É –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
        num = Math.abs(num);

        // –ü—Ä–∏–≤–æ–¥–∏–º –∫ 2-–º —Ü–∏—Ñ—Ä–∞–º –ø–æ—Å–ª–µ —Ç–æ—á–∫–∏
        num = num.toFixed(2);

        numSplit = num.split('.');
        // –¶–µ–ª–∞—è —á–∞—Å—Ç—å
        int = numSplit[0];
        // –î–µ—Å—è—Ç—ã–µ –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        dec = numSplit[1];

        // –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ 
        // –ò—Å—Ö–æ–¥—è –∏–∑ –¥–ª–∏–Ω–Ω—ã —á–∏—Å–ª–∞ –¥–µ–ª–∏–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 3 —Ü–∏—Ñ—Ä—ã
        // –ù–∞—á–∏–Ω–∞—è —Å –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç—Ä–µ—Ç—å–µ–≥–æ —á–∏—Å–ª–∞
        // –ï—Å–ª–∏ –¥–ª–∏–Ω–Ω–∞ –Ω–æ–º–µ—Ä–∞ –±–æ–ª–µ–µ —á–µ–º 3 —Ü–∏—Ñ—Ä—ã –∑–Ω–∞—á–∏—Ç –Ω–∞–¥–æ —Å—Ç–∞–≤–∏—Ç—å –∑–∞–ø—è—Ç—ã–µ
        if(int.length > 3) {
            newInt = '';

            // console.log("üöÄ ~ file: view.js ~ line 42 ~ formatNumber ~ int.length", int.length);

            for( let i = 0; i < int.length / 3; i++ ) {
                // console.log("üöÄ ~ file: view.js ~ line 45 ~ formatNumber ~ i", i);

                // –§–æ—Ä–º–∏—Ä—É—é –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –Ω–æ–º–µ—Ä–æ–º
                newInt =
                // –î–æ–±–∞–≤–ª—è—é –∑–∞–ø—è—Ç—É—é –∫–∞–∂–¥—ã–µ 3 —á–∏—Å–ª–∞
                "," +
                // –í—ã—Ä–µ–∑–∞–Ω–Ω—ã–π –∫—É—Å–æ–∫ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                int.substring(int.length - 3 * (i + 1), int.length - 3 * i) +
                // –ö–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏, –ø—Ä–∞–≤–∞—è —á–∞—Å—Ç—å
                newInt;
                
                // console.log("üöÄ ~ file: view.js ~ line 49 ~ formatNumber ~ newInt", newInt)
            }
            // console.log("üöÄ ~ file: view.js ~ line 49 ~ formatNumber ~ newInt", newInt)

            // –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—É—é –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if(newInt[0] === ',') {
                newInt = newInt.substring(1);
            }

        // –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ —Ä–∞–≤–Ω–æ 0, —Ç–æ –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–ø–∏—Å—ã–≤–∞–µ–º 0    
        } else if (int === '0') {
            newInt = '0';
        // –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–µ —á–∏—Å–ª–æ –∏–º–µ–µ—Ç 3 –∏ –º–µ–Ω–µ–µ —Å–∏–º–≤–æ–ª–æ–≤
        } else {
            newInt = int;
        }

        resultNumber = newInt + '.' + dec;

        if(type === 'exp')  {
            resultNumber = '- ' + resultNumber;
        } else if(type === 'inc') {
            resultNumber = '+ ' + resultNumber;
        }

        return resultNumber;
    };

    function renderListItem(object, type){
        let containerElement, html;

        if ( type === 'inc') {
            containerElement = DOMstrings.incomeContainer;
            html = `<li id="inc-%id%" class="budget-list__item item item--income">
                        <div class="item__title">%description%</div>
                        <div class="item__right">
                            <div class="item__amount">%value%</div>
                            <button class="item__remove">
                                <img
                                    src="./img/circle-green.svg"
                                    alt="delete"
                                />
                            </button>
                        </div>
                    </li>`
        } else {
            containerElement = DOMstrings.expenseContainer;
            html = `<li id="exp-%id%" class="budget-list__item item item--expense">
                        <div class="item__title">%description%</div>
                        <div class="item__right">
                            <div class="item__amount">
                                %value%
                                <div class="item__badge">
                                    <div class="item__percent badge badge--dark">
                                        15%
                                    </div>
                                </div>
                            </div>
                            <button class="item__remove">
                                <img src="./img/circle-red.svg" alt="delete" />
                            </button>
                        </div>
                    </li>`
        }

        newHtml = html.replace('%id%', object.id);
        newHtml = newHtml.replace('%description%', object.description);
        newHtml = newHtml.replace('%value%', formatNumber(object.value, type));

        document.querySelector(containerElement).insertAdjacentHTML('beforeend', newHtml);
    };

    function clearFilds(){
        let inputDesc, inputVal;

        inputDesc = document.querySelector(DOMstrings.inputDescription);
        inputVal = document.querySelector(DOMstrings.inputValue);

        inputDesc.value = '';
        inputDesc.focus();
        
        inputVal.value = '';
    };

    function updataBudget(obj) {
        let type;

        if(obj.budget > 0) {
            type = 'inc';
        } else {
            type = 'exp';
        }

        document.querySelector(DOMstrings.budgetLabel).textContent = formatNumber(obj.budget, type);
        document.querySelector(DOMstrings.incomLabel).textContent = formatNumber(obj.totalInc, 'inc');
        document.querySelector(DOMstrings.expenseLabel).textContent = formatNumber(obj.totalExp, 'exp');

        if (obj.percentage > 0) {
            document.querySelector(DOMstrings.expensesPercentLabel).textContent = obj.percentage;
        } else {
            document.querySelector(DOMstrings.expensesPercentLabel).textContent = '--';
        }

    };

    function deleteListItem(itemID) {
        document.getElementById(itemID).remove();
    };

    function updateItemPercentages(items) {
        
        items.forEach(item => {
            // –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –º–∞—Å—Å–∏–≤–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–¥–∞
            let el = document.getElementById(`exp-${item[0]}`).querySelector('.item__percent');

            if(item[1] >= 0) {
                el.parentElement.style.display = 'block';
                
                el.textContent = item[1] + '%';
            } else {
                el.parentElement.style.display = 'none';
            };


        });
    };

    function displayMonth() {
        let now, year, month

        now = new Date();
        year = now.getFullYear();
        month = now.getMonth();

        monthArr = [
            '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤–∞–ª—å', '–ú–∞—Ä—Ç', 
            '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', 
            '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', 
            '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
        ];

        month = monthArr[month];
        document.querySelector(DOMstrings.monthLabel).innerText = month;
        document.querySelector(DOMstrings.yearLabel).innerText = year;
    }

    return {
        displayMonth: displayMonth,
        updateItemPercentages: updateItemPercentages,
        deleteListItem: deleteListItem,
        getInput: getInput,
        renderListItem: renderListItem,
        clearFilds: clearFilds,
        updataBudget: updataBudget,
        getDomStrings: function(){
            return DOMstrings;
        }
    };
})();